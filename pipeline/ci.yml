steps:
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '$(jdkVersion)'
      jdkArchitectureOption: 'x64'

  - task: Gradle@2
    displayName: 'Gradle build and test'
    inputs:
      workingDirectory: '$(rutaDirectorioRaizProyecto)'
      gradleWrapperFile: 'gradlew'
      tasks: 'build test'
    continueOnError: true

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TEST-*.xml'
      failTaskOnFailedTests: true

  - task: SonarCloudPrepare@1
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarCloud: '$(nombreConexionSonarcloud)'
      organization: '$(nombreOrganizacionSonarcloud)'
      scannerMode: 'CLI'
      configMode: 'file'
      cliProjectKey: '$(claveProyectoSonarcloud)'
      cliSources: '$(rutaDirectorioRaizProyecto)'

  - task: SonarCloudAnalyze@1
    displayName: 'Run SonarCloud analysis'
    inputs:
      SonarCloud: '$(nombreConexionSonarcloud)'

  - task: SonarCloudPublish@1
    displayName: 'Publish SonarCloud Quality Gate result'
    inputs:
      SonarCloud: '$(nombreConexionSonarcloud)'
      waitForQualityGate: 'true'

  - task: Docker@2
    displayName: 'Build Docker image'
    inputs:
      containerRegistry: '$(nombreRegistroContenedor)'
      repository: '$(imageName)'
      dockerfile: '$(dockerfilePath)'
      tags: |
        $(tag)

  - task: Docker@2
    displayName: 'Push Docker image'
    inputs:
      containerRegistry: '$(nombreRegistroContenedor)'
      repository: '$(imageName)'
      command: 'push'
      tags: |
        $(tag)